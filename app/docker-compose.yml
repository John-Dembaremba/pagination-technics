version: "3.8"

services:
  pagination_app_db:
    image: postgres:${POSTGRES_VERSION}
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PSW}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    command: -p ${POSTGRES_PORT}
    container_name: ${POSTGRES_CONTAINER_NAME}
    expose:
      - "${POSTGRES_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}",
        ]
      interval: 10s
      timeout: 5s
      retries: 2
    volumes:
      - pagination_app_db-data:/var/lib/postgresql/data
    networks:
      - pagination-app

  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8081
    depends_on:
      pagination_app_db:
        condition: service_healthy
    networks:
      - pagination-app

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      pagination_app_db:
        condition: service_healthy
    container_name: "app"
    env_file:
      - .env
    restart: always
    networks:
      - pagination-app
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - .:/app
    command: go run main.go # dev server uses this, not for production server

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      node_exporter:
        condition: service_started
      cadvisor:
        condition: service_started
      postgres_exporter:
        condition: service_started
    networks:
      - pagination-app

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./observability/dashboards/grafana:/var/lib/grafana/dashboards
      - ./observability/provisioning/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./observability/datasources/prometheus/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - pagination-app

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - "--collector.disable-defaults"
      - "--collector.cpu"
      - "--collector.meminfo"
      - "--collector.diskstats"
      - "--collector.netdev"
      - "--collector.filesystem"
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - pagination-app

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    privileged: true
    restart: unless-stopped
    networks:
      - pagination-app

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: ${POSTGRES_EXPORTER_CONTAINER_NAME}
    depends_on:
      pagination_app_db:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PSW}@${POSTGRES_CONTAINER_NAME}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "true"
    ports:
      - "9187:9187"
    restart: unless-stopped
    networks:
      - pagination-app

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ${JAEGER_HOST}
    env_file: .env
    ports:
      - "16686:16686" # Jaeger UI
      - "${OTLP_HTTP_PORT}:${OTLP_HTTP_PORT}" # OTLP HTTP endpoint
    networks:
      - pagination-app

volumes:
  pagination_app_db-data:
  grafana-storage:

networks:
  pagination-app:
    driver: bridge
